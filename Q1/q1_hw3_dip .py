# -*- coding: utf-8 -*-
"""q1-hw3-dip.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-c5gqN-_uwHt2lDWz3PyHzXNPbkKYI9O
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt

img = np.array([[0, 0 , 10 , 10 , 0],[0 , 10 , 20 , 20 , 10],[0 , 10 ,20,20, 10],[0 ,0, 10 , 10,0],[0,0,0,0,0]])

# smoothing 1  :------------------------------------------------------------------------

kernel_size = 3
m, n = img.shape
smooth1 = np.zeros([m, n])
margin = int((kernel_size-1)/2)
down =-margin
up = margin


mask = np.ones([kernel_size, kernel_size], dtype = int)
mask = mask / kernel_size**2
for i in range(1, m-margin):
  for j in range(1, n-margin):
    sum = 0
    for x in range(down,up+1):
      for y in range(down,up+1):
        sum += (img[i+x, j+y]*mask[up+x, up+y])
    smooth1[i, j]= sum

print('first smoothing filter : \n'+ str(smooth1))

# smoothing 2  :------------------------------------------------------------------------
kernel_size = 3
m, n = img.shape
smooth2 = np.zeros([m, n])
margin = int((kernel_size-1)/2)
down =-margin
up = margin

mask = mask = np.array([[1, 2 , 1],[2,4,2],[1, 2 , 1]])
mask = mask / 16
for i in range(1, m-margin):
  for j in range(1, n-margin):
    sum = 0
    for x in range(down,up+1):
      for y in range(down,up+1):
        sum += (img[i+x, j+y]*mask[up+x, up+y])
    smooth2[i, j]= sum

print('second smoothing filter : \n'+ str(smooth2))

# sharpen 1  :------------------------------------------------------------------------

kernel_size = 3
m, n = img.shape
sharpen1 = np.zeros([m, n])
margin = int((kernel_size-1)/2)
down =-margin
up = margin

mask = mask = np.array([[-1, -1 , -1],[-1,9,-1],[-1, -1 , -1]])

for i in range(1, m-margin):
  for j in range(1, n-margin):
    sum = 0
    for x in range(down,up+1):
      for y in range(down,up+1):
        sum += (img[i+x, j+y]*mask[up+x, up+y])
    sharpen1[i, j]= sum

print('first sharpening filter : \n'+ str(sharpen1))

# sharpen 2  :------------------------------------------------------------------------

kernel_size = 3
m, n = img.shape
sharpen2 = np.zeros([m, n])
margin = int((kernel_size-1)/2)
down =-margin
up = margin

mask = mask = np.array([[0, -1 , 0],[-1,5,-1],[0, -1 , 0]])

for i in range(1, m-margin):
  for j in range(1, n-margin):
    sum = 0
    for x in range(down,up+1):
      for y in range(down,up+1):
        sum += (img[i+x, j+y]*mask[up+x, up+y])
    sharpen2[i, j]= sum

print('second sharpening filter : \n'+ str(sharpen2))